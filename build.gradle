apply plugin: "java"
apply plugin: "idea"
apply plugin: "eclipse"
apply plugin: "application"
apply plugin: 'pmd'
apply plugin: 'findbugs'
apply plugin: 'jacoco'

mainClassName = "de.uniba.dsg.bpmnspector.BPMNspectorMain"

task wrapper(type: Wrapper) {
    gradleVersion = '2.2'
}

repositories {
    mavenCentral()
}

configurations {
    internal
    external
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

dependencies {
    internal 'org.jdom:jdom2:2.0.6'
    internal 'jaxen:jaxen:1.1.+'
    internal 'ch.qos.logback:logback-core:1.1.+'
    internal 'ch.qos.logback:logback-classic:1.1.+'
    internal 'org.slf4j:slf4j-api:1.7.+'
    internal 'com.phloc:phloc-commons:4.3.+'
    internal 'commons-cli:commons-cli:1.2'
    internal 'commons-io:commons-io:2.4'
    internal 'org.apache.velocity:velocity:1.7'

    pmd 'net.sourceforge.pmd:pmd-core:5.2.+'
    pmd 'net.sourceforge.pmd:pmd-java:5.2.+'

    external files(fileTree(dir: "lib", includes: ['*.jar']))

    testCompile 'junit:junit:4.+'

    compile configurations.internal
    compile configurations.external
}

pmd {
    toolVersion = '5.2.3'
    ruleSetFiles = files("config/pmd.xml")
    ruleSets = []
	ignoreFailures = true
}

findbugs {
    ignoreFailures = true
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
 }

jacoco {
    toolVersion = "0.7.1.201405082137"
}

jar.archiveName = "BPMNspector.jar"

jar {
    from configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) }
    manifest { attributes 'Main-Class': mainClassName }
}

compileJava {
    dependsOn 'zipReportResources'
}

run {
    if(project.hasProperty('args')){
        args project.args.split('\\s+')
    }
}

task zipReportResources(type: Zip) {
    archiveName = "reportingResources.zip"
    from('src/main/resources/reporting/res')
    destinationDir = file('src/main/resources')
}